// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: shortener_service.proto

package auth_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error)
	UpdateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*GetShortUrlResponse, error)
	IncClickCount(ctx context.Context, in *IncClickCountRequest, opts ...grpc.CallOption) (*IncClickCountResponse, error)
	HandleLongUrl(ctx context.Context, in *HandleLongUrlRequest, opts ...grpc.CallOption) (*HandleLongUrlResponse, error)
	GetAllUserUrls(ctx context.Context, in *GetAllUserUrlsRequest, opts ...grpc.CallOption) (*GetAllUserUrlsResponse, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error) {
	out := new(CreateShortUrlResponse)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/CreateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) UpdateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/UpdateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*GetShortUrlResponse, error) {
	out := new(GetShortUrlResponse)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/GetShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) IncClickCount(ctx context.Context, in *IncClickCountRequest, opts ...grpc.CallOption) (*IncClickCountResponse, error) {
	out := new(IncClickCountResponse)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/IncClickCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) HandleLongUrl(ctx context.Context, in *HandleLongUrlRequest, opts ...grpc.CallOption) (*HandleLongUrlResponse, error) {
	out := new(HandleLongUrlResponse)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/HandleLongUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetAllUserUrls(ctx context.Context, in *GetAllUserUrlsRequest, opts ...grpc.CallOption) (*GetAllUserUrlsResponse, error) {
	out := new(GetAllUserUrlsResponse)
	err := c.cc.Invoke(ctx, "/auth_service.ShortenerService/GetAllUserUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error)
	UpdateShortUrl(context.Context, *CreateShortUrlRequest) (*empty.Empty, error)
	GetShortUrl(context.Context, *GetShortUrlRequest) (*GetShortUrlResponse, error)
	IncClickCount(context.Context, *IncClickCountRequest) (*IncClickCountResponse, error)
	HandleLongUrl(context.Context, *HandleLongUrlRequest) (*HandleLongUrlResponse, error)
	GetAllUserUrls(context.Context, *GetAllUserUrlsRequest) (*GetAllUserUrlsResponse, error)
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortenerServiceServer) UpdateShortUrl(context.Context, *CreateShortUrlRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortUrl not implemented")
}
func (UnimplementedShortenerServiceServer) GetShortUrl(context.Context, *GetShortUrlRequest) (*GetShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedShortenerServiceServer) IncClickCount(context.Context, *IncClickCountRequest) (*IncClickCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncClickCount not implemented")
}
func (UnimplementedShortenerServiceServer) HandleLongUrl(context.Context, *HandleLongUrlRequest) (*HandleLongUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLongUrl not implemented")
}
func (UnimplementedShortenerServiceServer) GetAllUserUrls(context.Context, *GetAllUserUrlsRequest) (*GetAllUserUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserUrls not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/CreateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_UpdateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).UpdateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/UpdateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).UpdateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/GetShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetShortUrl(ctx, req.(*GetShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_IncClickCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncClickCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).IncClickCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/IncClickCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).IncClickCount(ctx, req.(*IncClickCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_HandleLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).HandleLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/HandleLongUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).HandleLongUrl(ctx, req.(*HandleLongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetAllUserUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetAllUserUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ShortenerService/GetAllUserUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetAllUserUrls(ctx, req.(*GetAllUserUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortenerService_CreateShortUrl_Handler,
		},
		{
			MethodName: "UpdateShortUrl",
			Handler:    _ShortenerService_UpdateShortUrl_Handler,
		},
		{
			MethodName: "GetShortUrl",
			Handler:    _ShortenerService_GetShortUrl_Handler,
		},
		{
			MethodName: "IncClickCount",
			Handler:    _ShortenerService_IncClickCount_Handler,
		},
		{
			MethodName: "HandleLongUrl",
			Handler:    _ShortenerService_HandleLongUrl_Handler,
		},
		{
			MethodName: "GetAllUserUrls",
			Handler:    _ShortenerService_GetAllUserUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener_service.proto",
}
